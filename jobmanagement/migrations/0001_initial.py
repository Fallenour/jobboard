# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-02-13 09:47
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import jobmanagement.model_mixins
import jobmanagement.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', jobmanagement.models.PolyUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appliance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Appliance Date')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], max_length=100, verbose_name='Status')),
                ('motivational_text', models.TextField(blank=True, verbose_name='Motivationnal Text')),
            ],
            options={
                'verbose_name': 'Appliance',
                'verbose_name_plural': 'Appliances',
            },
        ),
        migrations.CreateModel(
            name='Enterprise',
            fields=[
                ('name', models.CharField(max_length=250, unique=True, verbose_name='Name')),
                ('logo', models.ImageField(blank=True, upload_to='enterprise_logo', verbose_name='Logo')),
                ('slug', models.SlugField(max_length=250, primary_key=True, serialize=False, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Enterprise',
                'verbose_name_plural': 'Enterprises',
            },
            bases=(jobmanagement.model_mixins.GetAbsoluteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, verbose_name='Title')),
                ('slug', models.SlugField(max_length=250, null=True, verbose_name='Slug')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('duration', models.DurationField(blank=True, null=True, verbose_name='Duration')),
                ('type', models.CharField(choices=[('cdi', 'CDI'), ('cdd', 'CDD'), ('interim', 'Interim'), ('freelance', 'Freelance'), ('internship', 'Internship')], max_length=100, verbose_name='Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('city', models.CharField(max_length=250, verbose_name='City')),
                ('postcode', models.CharField(max_length=10, verbose_name='Postcode')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('closed', 'Closed')], max_length=100, verbose_name='Status')),
                ('skill', models.CharField(blank=True, max_length=100, verbose_name='Researched Skill')),
                ('enterprise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobmanagement.Enterprise', verbose_name='Enterprise')),
            ],
            options={
                'verbose_name': 'Offer',
                'verbose_name_plural': 'Offers',
            },
        ),
        migrations.CreateModel(
            name='CandidateUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('file', models.FileField(upload_to='candidate_cv', verbose_name='CV\xa0File')),
                ('skill', models.CharField(blank=True, max_length=100, verbose_name='Candidate Skill')),
            ],
            options={
                'verbose_name': 'Candidate User',
                'verbose_name_plural': 'Candidate Users',
            },
            bases=(jobmanagement.model_mixins.GetAbsoluteMixin, 'jobmanagement.user'),
            managers=[
                ('objects', jobmanagement.models.PolyUserManager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='EnterpriseUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('enterprise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobmanagement.Enterprise')),
            ],
            options={
                'verbose_name': 'Enterprise User',
                'verbose_name_plural': 'Enterprise Users',
            },
            bases=('jobmanagement.user',),
            managers=[
                ('objects', jobmanagement.models.PolyUserManager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='appliance',
            name='offer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobmanagement.Offer', verbose_name='Offer'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_jobmanagement.user_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='appliance',
            name='candidate_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobmanagement.CandidateUser', verbose_name='Candidate User'),
        ),
    ]
